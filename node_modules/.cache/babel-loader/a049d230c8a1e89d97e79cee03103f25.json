{"ast":null,"code":"var _jsxFileName = \"/Users/Mike/Projects/my-app/src/index.js\";\n// use as\n// <EmbedWebView\n//  html = \".. html codes you get from Iframely ..\"\n// />\nimport React, { Component } from 'react';\nimport { WebView, View } from 'react-native'; // will receive height data from WebView\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction parseMessage(data) {\n  try {\n    data = JSON.parse(data);\n  } catch (ex) {\n    data = null;\n  }\n\n  return data;\n} // script to inject into WebView\n\n\nconst script = `\n    function getHeight(el) {\n        var elHeight = el.scrollHeight;\n        var docHeight = document.body.scrollHeight;\n        var height;\n        if (elHeight < docHeight && elHeight > 0) {\n            height = elHeight;\n        } else {\n            height = docHeight;\n        }\n        return height;\n    }\n    var height = 0;\n    var wrapper = document.body.firstChild;\n    function updateSize() {\n        var h = getHeight(wrapper);\n        if (h !== height) {\n            height = h;\n            window.ReactNativeWebView.postMessage(JSON.stringify({\"height\": height}));\n        }\n    }\n    window.addEventListener(\"message\", function() {\n        // Listen to all messages to trigger additional size checks.\n        // Includes Iframely resize message, native pings from Twitter & et al\n        \n        // You can also try checking sizes periodically if you have issues\n        // see https://github.com/react-native-community/react-native-webview/issues/154\n        updateSize();\n    });\n    updateSize();\n`; // prevent webview scaling & add Iframely default styles and embed.js script as necessary\n\nconst head = `\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n<style>\n.iframely-responsive {\n    top: 0; left: 0; width: 100%; height: 0;\n    position: relative; padding-bottom: 56.25%;\n}\n.iframely-responsive>* {\n    top: 0; left: 0; width: 100%; height: 100%; position: absolute; border: 0;\n}\n</style>\n`; // please load embed.js script off your custom CDN, if you use it\n\nconst embedJsScript = '<script type=\"text/javascript\" src=\"https://g.adspeed.net/ad.php?do=js&zid=115091&oid=27477&wd=-1&ht=-1&target=_blank\"></script>';\nexport default class EmbedWebView extends Component {\n  constructor(props) {\n    super(props);\n    const paddingBottomMatch = this.props.html.match(/padding-bottom:\\s* ([\\d\\.]+)%/);\n    const paddingBottom = paddingBottomMatch && parseFloat(paddingBottomMatch[1]);\n    const needScript = this.props.html.match(/app=1/) || this.props.html.match(/data-iframely-url=/);\n    this.html = '<head>' + head + (needScript ? embedJsScript : '') + '</head><body>' + this.props.html + '</body>';\n    this.state = {\n      height: 0,\n      aspectRatio: paddingBottom && 100 / paddingBottom || 16 / 9\n    };\n    this.onWebViewMessage = this.onWebViewMessage.bind(this);\n  }\n\n  onWebViewMessage(e) {\n    var message = parseMessage(e.nativeEvent.data);\n\n    if (message && message.height) {\n      this.setState({\n        height: message.height,\n        aspectRatio: null\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(View, {\n      aspectRatio: this.state.aspectRatio,\n      children: /*#__PURE__*/_jsxDEV(WebView // 'useWebKit' adds support of postMessage for iOS WebView, available from the 0.57 release\n      , {\n        useWebKit: true,\n        scrollEnabled: false,\n        onMessage: this.onWebViewMessage,\n        source: {\n          html: this.html\n        },\n        style: {\n          height: this.state.height\n        },\n        javaScriptEnabled: true,\n        injectedJavaScript: script // add more props as you deem necessary, e.g. allowsInlineMediaPlayback, mediaPlaybackRequiresUserAction\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/Mike/Projects/my-app/src/index.js"],"names":["React","Component","WebView","View","parseMessage","data","JSON","parse","ex","script","head","embedJsScript","EmbedWebView","constructor","props","paddingBottomMatch","html","match","paddingBottom","parseFloat","needScript","state","height","aspectRatio","onWebViewMessage","bind","e","message","nativeEvent","setState","render"],"mappings":"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","sourcesContent":["// use as\n// <EmbedWebView\n//  html = \".. html codes you get from Iframely ..\"\n// />\n\nimport React, { Component } from 'react';\nimport { WebView, View } from 'react-native';\n\n// will receive height data from WebView\nfunction parseMessage(data) {\n    try {\n        data = JSON.parse(data);\n    } catch(ex) {\n        data = null;\n    }\n    return data;\n}\n\n// script to inject into WebView\nconst script = `\n    function getHeight(el) {\n        var elHeight = el.scrollHeight;\n        var docHeight = document.body.scrollHeight;\n        var height;\n        if (elHeight < docHeight && elHeight > 0) {\n            height = elHeight;\n        } else {\n            height = docHeight;\n        }\n        return height;\n    }\n    var height = 0;\n    var wrapper = document.body.firstChild;\n    function updateSize() {\n        var h = getHeight(wrapper);\n        if (h !== height) {\n            height = h;\n            window.ReactNativeWebView.postMessage(JSON.stringify({\"height\": height}));\n        }\n    }\n    window.addEventListener(\"message\", function() {\n        // Listen to all messages to trigger additional size checks.\n        // Includes Iframely resize message, native pings from Twitter & et al\n        \n        // You can also try checking sizes periodically if you have issues\n        // see https://github.com/react-native-community/react-native-webview/issues/154\n        updateSize();\n    });\n    updateSize();\n`;\n\n// prevent webview scaling & add Iframely default styles and embed.js script as necessary\nconst head = `\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n<style>\n.iframely-responsive {\n    top: 0; left: 0; width: 100%; height: 0;\n    position: relative; padding-bottom: 56.25%;\n}\n.iframely-responsive>* {\n    top: 0; left: 0; width: 100%; height: 100%; position: absolute; border: 0;\n}\n</style>\n`;\n\n// please load embed.js script off your custom CDN, if you use it\nconst embedJsScript = '<script type=\"text/javascript\" src=\"https://g.adspeed.net/ad.php?do=js&zid=115091&oid=27477&wd=-1&ht=-1&target=_blank\"></script>';\n\nexport default class EmbedWebView extends Component {\n  \n    constructor(props) {\n        super(props);\n\n        const paddingBottomMatch = this.props.html.match(/padding-bottom:\\s* ([\\d\\.]+)%/);\n        const paddingBottom = paddingBottomMatch && parseFloat(paddingBottomMatch[1]);\n\n        const needScript = this.props.html.match(/app=1/) || this.props.html.match(/data-iframely-url=/);\n\n        this.html = '<head>' + head + (needScript ? embedJsScript : '') + '</head><body>' + this.props.html + '</body>';\n\n        this.state = {\n            height: 0,\n            aspectRatio: paddingBottom && (100 / paddingBottom) || 16/9\n        };\n\n        this.onWebViewMessage = this.onWebViewMessage.bind(this);\n    }\n\n    onWebViewMessage(e) {\n        var message = parseMessage(e.nativeEvent.data);\n        if (message && message.height) {\n            this.setState({\n                height: message.height,\n                aspectRatio: null\n            });\n        }\n    }\n  \n    render() {\n        return (\n            <View aspectRatio={this.state.aspectRatio}>\n                <WebView\n                    // 'useWebKit' adds support of postMessage for iOS WebView, available from the 0.57 release\n                    useWebKit={true}\n                    scrollEnabled={false}\n                    onMessage={this.onWebViewMessage}\n                    source={{html: this.html}}\n                    style={{height: this.state.height}}\n                    javaScriptEnabled={true}\n                    injectedJavaScript={script}\n                    // add more props as you deem necessary, e.g. allowsInlineMediaPlayback, mediaPlaybackRequiresUserAction\n                />\n            </View>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}