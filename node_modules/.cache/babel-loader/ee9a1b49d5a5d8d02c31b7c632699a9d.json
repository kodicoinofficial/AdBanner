{"ast":null,"code":"var _jsxFileName = \"/Users/Mike/Projects/my-app/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KEY = \"MD5_HASH_OF_YOUR_API_KEY\";\nexport default function Iframely(props) {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [html, setHtml] = useState({\n    __html: \"<div />\"\n  });\n  useEffect(() => {\n    if (props && props.url) {\n      h;\n      fetch(`https://g.adspeed.net/ad.php?do=js&zid=115188&oid=27477&wd=-1&ht=-1&target=_blank`).then(res => res.json()).then(res => {\n        setIsLoaded(true);\n\n        if (res.html) {\n          setHtml({\n            __html: res.html\n          });\n        } else if (res.error) {\n          setError({\n            code: res.error,\n            message: res.message\n          });\n        }\n      }, error => {\n        setIsLoaded(true);\n        setError(error);\n      });\n    } else {\n      setError({\n        code: 400,\n        message: 'Provide url attribute for the element'\n      });\n    }\n  }, []);\n  useEffect(props => {\n    window.iframely && window.iframely.load();\n  });\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.code, \" - \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      dangerouslySetInnerHTML: html\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Iframely, \"R3XEOZzqO4PWOIu2Yz3cHDdWghc=\");\n\n_c = Iframely;\n\nvar _c;\n\n$RefreshReg$(_c, \"Iframely\");","map":{"version":3,"sources":["/Users/Mike/Projects/my-app/src/index.js"],"names":["React","useEffect","useState","KEY","Iframely","props","error","setError","isLoaded","setIsLoaded","html","setHtml","__html","url","h","fetch","then","res","json","code","message","window","iframely","load"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;AACA,MAAMC,GAAG,GAAG,0BAAZ;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACtC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC;AAC/BU,IAAAA,MAAM,EAAE;AADuB,GAAD,CAAhC;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,KAAK,IAAIA,KAAK,CAACQ,GAAnB,EAAwB;AAACC,MAAAA,CAAC;AACxBC,MAAAA,KAAK,CAAE,mFAAF,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKC,GAAD,IAAS;AACPR,QAAAA,WAAW,CAAC,IAAD,CAAX;;AACA,YAAIQ,GAAG,CAACP,IAAR,EAAc;AACZC,UAAAA,OAAO,CAAC;AAACC,YAAAA,MAAM,EAAEK,GAAG,CAACP;AAAb,WAAD,CAAP;AACD,SAFD,MAEO,IAAIO,GAAG,CAACX,KAAR,EAAe;AACpBC,UAAAA,QAAQ,CAAC;AAACY,YAAAA,IAAI,EAAEF,GAAG,CAACX,KAAX;AAAkBc,YAAAA,OAAO,EAAEH,GAAG,CAACG;AAA/B,WAAD,CAAR;AACD;AACF,OAVL,EAWKd,KAAD,IAAW;AACTG,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,OAdL;AAgBD,KAjBD,MAiBO;AACLC,MAAAA,QAAQ,CAAC;AAACY,QAAAA,IAAI,EAAE,GAAP;AAAYC,QAAAA,OAAO,EAAE;AAArB,OAAD,CAAR;AACD;AACF,GArBQ,EAqBN,EArBM,CAAT;AAuBAnB,EAAAA,SAAS,CAAEI,KAAD,IAAW;AACnBgB,IAAAA,MAAM,CAACC,QAAP,IAAmBD,MAAM,CAACC,QAAP,CAAgBC,IAAhB,EAAnB;AACD,GAFQ,CAAT;;AAIA,MAAIjB,KAAJ,EAAW;AACT,wBAAO;AAAA,4BAAaA,KAAK,CAACa,IAAnB,SAA4Bb,KAAK,CAACc,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO,IAAI,CAACZ,QAAL,EAAe;AACpB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,MAEA;AACL,wBACE;AAAK,MAAA,uBAAuB,EAC1BE;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;AACF;;GA7CuBN,Q;;KAAAA,Q","sourcesContent":["import React, {useEffect, useState} from \"react\";\nconst KEY = \"MD5_HASH_OF_YOUR_API_KEY\";\n\nexport default function Iframely(props) {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [html, setHtml] = useState({\n    __html: \"<div />\"\n  })\n\n  useEffect(() => {\n    if (props && props.url) {h\n      fetch(`https://g.adspeed.net/ad.php?do=js&zid=115188&oid=27477&wd=-1&ht=-1&target=_blank`)\n        .then(res => res.json())\n        .then(\n          (res) => {\n            setIsLoaded(true);\n            if (res.html) {\n              setHtml({__html: res.html});\n            } else if (res.error) {\n              setError({code: res.error, message: res.message});\n            }\n          },\n          (error) => {\n            setIsLoaded(true);\n            setError(error);\n          }\n        )\n    } else {\n      setError({code: 400, message: 'Provide url attribute for the element'})\n    }\n  }, []);\n\n  useEffect((props) => {\n    window.iframely && window.iframely.load();\n  });\n\n  if (error) {\n    return <div>Error: {error.code} - {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <div dangerouslySetInnerHTML = {\n        html\n      }/> \n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}