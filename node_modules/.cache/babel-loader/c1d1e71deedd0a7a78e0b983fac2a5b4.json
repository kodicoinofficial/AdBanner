{"ast":null,"code":"var _jsxFileName = \"/Users/Mike/Projects/my-app/src/index.js\";\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ExampleComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      myExternalLib: null\n    };\n    this.handleScriptInject = this.handleScriptInject.bind(this);\n  }\n\n  handleScriptInject(_ref) {\n    let {\n      scriptTags\n    } = _ref;\n\n    if (scriptTags) {\n      const scriptTag = scriptTags[0];\n\n      scriptTag.onload = () => {\n        // I don't really like referencing window.\n        console.log(`myExternalLib loaded!`, window.myExternalLib);\n        this.setState({\n          myExternalLib: window.myExternalLib\n        });\n      };\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Helmet, {\n        script: [{\n          src: \"https://someexternaldomain.com/myExternalLib.js\"\n        }] // Helmet doesn't support `onload` in script objects so we have to hack in our own\n        ,\n        onChangeClientState: (newState, addedTags) => this.handleScriptInject(addedTags)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.myExternalLib !== null ? \"We can display any UI/whatever depending on myExternalLib without worrying about null references and race conditions.\" : \"myExternalLib is loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/Mike/Projects/my-app/src/index.js"],"names":["React","Helmet","ExampleComponent","Component","constructor","props","state","myExternalLib","handleScriptInject","bind","scriptTags","scriptTag","onload","console","log","window","setState","render","src","newState","addedTags"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAEA,OAAO,MAAMC,gBAAN,SAA+BF,KAAK,CAACG,SAArC,CAA+C;AAClDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,aAAa,EAAE;AADN,KAAb;AAIA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACH;;AAEDD,EAAAA,kBAAkB,OAAiB;AAAA,QAAhB;AAAEE,MAAAA;AAAF,KAAgB;;AAC/B,QAAIA,UAAJ,EAAgB;AACZ,YAAMC,SAAS,GAAGD,UAAU,CAAC,CAAD,CAA5B;;AACAC,MAAAA,SAAS,CAACC,MAAV,GAAmB,MAAM;AACrB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAa,uBAAb,EAAqCC,MAAM,CAACR,aAA5C;AACA,aAAKS,QAAL,CAAc;AACVT,UAAAA,aAAa,EAAEQ,MAAM,CAACR;AADZ,SAAd;AAGH,OAND;AAOH;AACJ;;AAEDU,EAAAA,MAAM,GAAG;AACL,wBAAQ;AAAA,8BAEJ,QAAC,MAAD;AACI,QAAA,MAAM,EAAE,CAAC;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAAD,CADZ,CAEI;AAFJ;AAGI,QAAA,mBAAmB,EAAE,CAACC,QAAD,EAAWC,SAAX,KAAyB,KAAKZ,kBAAL,CAAwBY,SAAxB;AAHlD;AAAA;AAAA;AAAA;AAAA,cAFI,eAOJ;AAAA,kBACK,KAAKd,KAAL,CAAWC,aAAX,KAA6B,IAA7B,GACK,uHADL,GAEK;AAHV;AAAA;AAAA;AAAA;AAAA,cAPI;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAaH;;AAtCiD","sourcesContent":["import React from \"react\";\nimport Helmet from \"react-helmet\";\n\nexport class ExampleComponent extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            myExternalLib: null\n        };\n\n        this.handleScriptInject = this.handleScriptInject.bind(this);\n    }\n\n    handleScriptInject({ scriptTags }) {\n        if (scriptTags) {\n            const scriptTag = scriptTags[0];\n            scriptTag.onload = () => {\n                // I don't really like referencing window.\n                console.log(`myExternalLib loaded!`, window.myExternalLib);\n                this.setState({\n                    myExternalLib: window.myExternalLib\n                });\n            };\n        }\n    }\n\n    render() {\n        return (<div>\n            {/* Load the myExternalLib.js library. */}\n            <Helmet\n                script={[{ src: \"https://someexternaldomain.com/myExternalLib.js\" }]}\n                // Helmet doesn't support `onload` in script objects so we have to hack in our own\n                onChangeClientState={(newState, addedTags) => this.handleScriptInject(addedTags)}\n            />\n            <div>\n                {this.state.myExternalLib !== null\n                    ? \"We can display any UI/whatever depending on myExternalLib without worrying about null references and race conditions.\"\n                    : \"myExternalLib is loading...\"}\n            </div>\n        </div>);\n    }\n}"]},"metadata":{},"sourceType":"module"}